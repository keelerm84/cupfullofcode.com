[{"content":"I recently converted this site from hexo to hugo. Hugo is fantastic but the lack of a built-in deployment mechanism leaves much to be desired.\nThe Hugo documentation provides an example of how to deploy your site to GitHub pages, but I\u0026rsquo;m too lazy to run a script for every deployment. Enter GitHub Actions.\nGitHub Actions is the newest offering from GitHub, offering a simple interface to automate actions based off a variety of special repository events. So how can we use this to automatically build and publish our hugo sites?\nWe are going to need the following:\n A deployment key and secret key value used to give our build process write access to our repository A Dockerfile that builds and pushes our commits A new GitHub Actions workflow file to tie it all together  Deployment / Secret Keys We need to configure a set of writable deployment keys so that we can push our generated site to the gh-pages branch. To generate these keys, we can run the following command:\nssh-keygen -t ed25519 -f ~/.ssh/cupfullofcode-deploy The public key (cupfullofcode-deploy.pub) needs to be saved as a write-enabled deployment key.\nThe private key (cupfullofcode-deploy) needs to be saved as a secret. NOTE: Make sure you name the secret GH_ACTION_DEPLOY_KEY. We will need to reference this later.\nDockerfile Now that we have a writable key to use, we need to configure a Docker image capable of building and publishing our site.\nThe Dockerfile is included below, along with comments explaining each section. The biggest thing to note is the ARG GH_ACTION_DEPLOY_KEY line.\nWe will use that functionality to provide our private key to the container in a later step, allowing us to commit changes to our repository.\n# Start with a bare bones image that already has hugo installedFROMklakegg/hugo:0.52-alpine# Allow setting GH_ACTION_DEPLOY_KEY via the docker build commandARG GH_ACTION_DEPLOY_KEY# We need git to commit and openssh to pushRUN apk add git opensshRUN git config --global user.email \u0026#34;keelerm84@gmail.com\u0026#34; \u0026amp;\u0026amp; \\  git config --global user.name \u0026#34;Matthew M. Keeler\u0026#34;# Use our build arg to store our private key. Run ssh-keyscan so we aren\u0026#39;t# prompted to trust the github.com host when we push our changesRUN mkdir -p ~/.ssh/ \u0026amp;\u0026amp; \\  echo \u0026#34;$GH_ACTION_DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa \u0026amp;\u0026amp; \\  chmod 600 ~/.ssh/id_rsa \u0026amp;\u0026amp; \\  ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hostsWORKDIR/site/ADD . /site/# By default, GH Actions will run with your repo checked out using the https# protocol. This prevents us from being able to push using our stored key, so # we change it to git@RUN git remote rm origin \u0026amp;\u0026amp; \\  git remote add origin git@github.com:keelerm84/cupfullofcode.com \u0026amp;\u0026amp; \\  git fetch# My theme is configured as a submodule so I need to pull it in. You may not# need this if you have committed your theme directly to your repository.RUN git submodule update --init --recursive# Checkout the gh-pages branch as a working tree so that generated hugo files# are ready to be committed in that branch.RUN git worktree add -B gh-pages public origin/gh-pages# Build the site of courseRUN hugo# Commit and push (NOTE: --allow-empty is here just in case I push a change that# results in no change to the generated site, like updating a README or# these build scripts).RUN cd public \u0026amp;\u0026amp; \\  git add --all \u0026amp;\u0026amp; \\  git commit -m \u0026#34;Site updated: `date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;`\u0026#34; --allow-empty \u0026amp;\u0026amp; \\  git push origin gh-pages:gh-pages GitHub Workflow File We now have a Docker container that will build and publish the site and we have write-enabled access keys. All that is left is to hook up these pieces through actions.\nI\u0026rsquo;ll show you how to configure it via the UI, but you can just copy the final file shown below.\nThe first step is to configure the event on which this workflow should execute. Currently, GitHub only supports push events to branches for public repositories, but since that\u0026rsquo;s what we need we\u0026rsquo;re in good shape.\n While pushing to a branch is perfect for our use case, we don\u0026rsquo;t want to deploy when we push a change to ANY branch. If we did, our site would be deployed any time someone pushes a feature branch.\nLuckily, we have the option of adding a filter step which allows us to halt execution of the workflow if the branch isn\u0026rsquo;t master.\n We finish the workflow off by building our Docker image. You can see in the screenshot that we pass in the GH_ACTION_DEPLOY_KEY as a build argument, setting it to some environment variable. This environment variable will be populated if you check the appropriate box under the secrets section.\n You can now commit this configuration. A new file will be commited under .github in the root of your repository. I have reproduced this file below for your convenience.\nworkflow \u0026#34;Publish Site\u0026#34; {  on = \u0026#34;push\u0026#34;  resolves = [\u0026#34;Docker Build And Publish\u0026#34;] }  action \u0026#34;Master Branch Only\u0026#34; {  uses = \u0026#34;actions/bin/filter@b2bea07\u0026#34;  args = \u0026#34;branch master\u0026#34; }  action \u0026#34;Docker Build And Publish\u0026#34; {  uses = \u0026#34;actions/docker/cli@76ff57a\u0026#34;  needs = [\u0026#34;Master Branch Only\u0026#34;]  args = \u0026#34;build --build-arg GH_ACTION_DEPLOY_KEY=\\\u0026#34;$GH_ACTION_DEPLOY_KEY\\\u0026#34; .\u0026#34;  secrets = [\u0026#34;GH_ACTION_DEPLOY_KEY\u0026#34;] } At this point, you have everything setup to automatically build and publish your site whenever you push to master. Happy blogging!\n","date":"2018-12-21","permalink":"https://cupfullofcode.com/blog/2018/12/21/deploying-hugo-with-github-actions/","tags":["devops","hugo","github"],"title":"Deploying Hugo With Github Actions"},{"content":"On Thursday, March 26th, 2015 my friend Jacob and I presented to DevICT on what we love about our editors of choice. Jacob covered vim and I spoke about emacs.\nWhile this talk was billed as a head-to-head competition, neither Jacob nor I had any intention of \u0026ldquo;battling it out\u0026rdquo;. Instead, we wanted to focus on what we thought each editor excelled at, and what we in particular liked about them.\nThe talks are available on YouTube, as are all the previous talked by DevICT.\n    ","date":"2015-03-29","permalink":"https://cupfullofcode.com/blog/2015/03/29/a-look-at-vim-and-emacs/","tags":["emacs","vim"],"title":"A Look at Vim and Emacs"},{"content":"Projectile is a staple of my emacs configuration. In my opinion, it is one of the all time best packages available, along with org-mode and magit.\nOne of my most commonly used commands with projectile is helm-projectile. This lets me locate any file in my project by pressing C-c p h. Using the narrowing abilities of helm, I can quickly filter the list of options to exactly the one I want.\nBecause I work on some projects that are extremely large in size, I have enabled projectiles caching mechanism. This tells projectile to maintain a local cache of all the files within a project for faster searching. You can enable this with (setq projectile-enable-caching t)\nProjectile helps maintain the current state of this cache by adding a hook to find-file. Whenever a new file is found or created, projectile will automatically add that new file to the cache. This saves me from having to manually invalidate the cache with C-c p i every time a create a new file.\nHowever, if I delete a file, projectile does not automatically remove it from the cache. The next time I search for a similarly named file, the deleted file will still show up in the helm list of candidates. While not a deal breaker, it is certainly a source of annoyance for me. Since emacs is all about tweaking your environment to eliminate those little headaches, I knew I had to fix it.\nAt first, I thought adding a hook to delete-file would be the easy, straightforward fix. I couldn\u0026rsquo;t find any documentation for a delete-file-hook. Having tried to check out the source code, I realized that while find-file is implemented in lisp, delete-file is actually implemented in C.\nHaving been unable to find a hook associated with this function, what was I do to?\nThis is where defadvice comes in. I won\u0026rsquo;t go into detail about how defadvice works, but the short version is that defadvice allows you to suggest behavior to emacs before, after, or around an invocation of a particular function. You can read more about defadvice in the manual.\nThe below snippet adds advice before the delete-file function is called. It checks to see if the file is part of a projectile project; if the file is cached by projectile, it removes it from the cache.\nNOTE This defadvice function is no longer necessary. This functionality has now been incorporated into projectile.\n(defadvice delete-file (before purge-from-projectile-cache (filename \u0026amp;optional trash))  (if (and (projectile-project-p) projectile-enable-caching)  (let* ((project-root (projectile-project-root))  (true-filename (file-truename filename))  (relative-filename (file-relative-name true-filename project-root)))  (if (projectile-file-cached-p relative-filename project-root)  (projectile-purge-file-from-cache relative-filename)))))  (ad-activate \u0026#39;delete-file) That\u0026rsquo;s it. With just a few short lines, projectile will now invalidate the cache as soon as I delete a file, just as I would like. Isn\u0026rsquo;t emacs great?\n","date":"2014-10-06","permalink":"https://cupfullofcode.com/blog/2014/10/06/invalidate-projectile-cache-on-delete/","tags":["projectile","elisp","emacs"],"title":"Invalidate Projectile Cache on Delete"},{"content":"By day, I work as a PHP developer at Research Square. My time is spent developing new functionality for the RS suite of products. This may include working in greenfield code bases or extending our legacy products. In either case, dozens of times a day, I find myself performing various code refactorings.\nThe Problem Refactoring code is imperative to maintaining a healthy code base. Technical debt can quickly pile up in even a moderately sized code base, let alone across a system flirting with a million lines of code. It is the job of any developer to ensure code is refactored whenever the existing design begins to offer friction. It is absolutely critical that these refactorings in no way alter the behavior of the system.\nIn Martin Fowler\u0026rsquo;s book, Refactoring: Improving the Design of Existing Code, he discusses a variety of common refactoring patterns, outlining the necessary steps to execute these methods safely and efficiently. While the steps given are excellent, to perform them manually is not only tedious, but horribly error prone.\nWhile some IDEs provide automated support for such refactorings, text editors like vim and emacs do not. As a long time user of both (with emacs being my favored editor these days), I needed to look elsewhere to achieve this kind of support.\nThe Solution During my search for a decent solution, I came across the php-refactoring-browser by QafooLabs. The php-refactoring-browser is a command-line tool, written in PHP, that can perform a variety of refactoring methods on a particular file. Following the guidelines from Fowler\u0026rsquo;s books, each refactoring is a series of simple steps that ensure the system\u0026rsquo;s behavior is left unaltered.\nA New Problem I tried out this tool for a while and absolutely loved the results. The php-refactoring-browser performed remarkably well and provided me with a solution I had desperately been seeking. But alas, there was a problem.\nWhile I love the command-line, using the php-refactoring-browser directly was time consuming and frankly, quite annoying. Each refactoring method requires a decent number of arguments, including the file and associated line numbers to operate on.\nFor example, in order to convert a local variable to an instance variable, the command would look something like\nphp refactor.phar convert-local-to-instance-variable FileToRefactor.php 17 $aLocalVariableName Further more, the php-refactoring-browser will only generate a patch of the necessary changes. It will not modify the files inline. Not only was I responsible for providing all of these input parameters, I also had to manually apply the patch, and then refresh the file in my editor.\nA New Solution Being an enthusiastic user of emacs, I knew there had to be a better way. So I set out to create a minor mode for working with the php-refactoring-browser. php-refactor-mode is the result.\nThis minor mode allows you to quickly perform a variety of the refactoring methods available through the php-refactoring-browser with a few short keystrokes. Since emacs already knows the path to the file and any line numbers, I was relieved from ever having to think about that again. And as for things emacs doesn\u0026rsquo;t know, such as the new method name I might want to use, it can simply prompt me for it.\nFurthermore, the minor mode will automatically apply the resulting patch from the php-refactoring-browser and re-read the file contents so you can focus on the work at hand, never breaking your flow to think about the steps for performing these refactorings.\nAs a final benefit, each refactoring can be undone as one atomic operation. So if you decide you don\u0026rsquo;t like the results, press C-_ and proceed as if it never happened.\nLet\u0026rsquo;s See It In Action Below is a video demoing some of the supported refactoring methods provided by php-refactor-mode. If you\u0026rsquo;re an emacs user who writes PHP, I hope you\u0026rsquo;ll consider giving it a try. The package is available for installation on melpa and of course the source code is available on github.\n  vim Users If you\u0026rsquo;re a vim user, then you\u0026rsquo;re in luck. vim-php-refactoring is a vim plugin that provides the same type of support. In fact, it was a great source of inspiration for my emacs package. Thanks for paving the way!\n","date":"2014-09-21","permalink":"https://cupfullofcode.com/blog/2014/09/21/performing-controlled-php-refactorings-in-emacs/","tags":["php","refactoring","emacs"],"title":"Performing Controlled PHP Refactorings in Emacs"},{"content":"Without a doubt, Org Mode is one of the most impressive and versatile features of Emacs. Great for writing structured documents, managing lists and planning, and for exporting those documents into a variety of formats, it\u0026rsquo;s my go to tool for flexible, efficient editing.\nIn the video below, I cover one small aspect of Org Mode; namely, the ability to embed code snippets within your document. I\u0026rsquo;ll cover some of the problems you will run into when first attempting to embed code, how to overcome them, and some shortcuts that make the whole process much more streamlined.\nEnjoy!\n ","date":"2013-11-22","permalink":"https://cupfullofcode.com/blog/2013/11/22/embedding-code-snippets-in-org-mode/","tags":["org-mode","emacs"],"title":"Embedding Code Snippets in Org Mode"},{"content":"One of the requirements of my job is to send out a daily message. This message should summarize what I did the day before, and what I hope to accomplish for the current day. At first, I would spend my day jumping from task to task, and then the next morning, I would rack my brain to make sure I included all the things I worked on.\nIt didn\u0026rsquo;t take long to realize that this was no way to live. I definitely needed a better solution. So I started looking around.\nOrg Journal After hunting around for a bit, I came across Org Journal. It is a fantastic package for, as the name implies, writing journal entries. And since it\u0026rsquo;s built on top of Org Mode, I knew I had to give it a try.\nOnce installed and configured, I can press, in my case, C-x j, and this will either start a new journal entry if one doesn\u0026rsquo;t already exist, or open an existing one. Each time a new entry is added, org-journal inserts a second level heading in the document, and stamps it with the time the entry was added.\nThis was definitely a productivity win for me, and so I settled on it as my tool of choice.\nScratching An Itch Even though org-journal was assisting me in remembering everything I did on the previous day, I still had to format the entries into a suitable format and send them off to my boss. Accomplishing this was a multi-step process which I quickly grew tired of. I had to:\n Call M-x calendar and navigate to the previous day Press j to open that day\u0026rsquo;s journal entry C-x h to copy the entire entry C-x b scratch to switch over to my scratch buffer C-y to paste the journal contents in Remove any additional notes I had, strip out the top level headers and time stamps, and then add my plan for the current day.  What a bunch of nonsense! I certainly wasn\u0026rsquo;t going to do that 5 days a week for the rest of my career.\nElisp to the Rescue So naturally, I did what any Emacs user would do: I wrote some lisp. Before we get into the code, I should warn you about something. I\u0026rsquo;m still pretty new to lisp. If you\u0026rsquo;re an old hat at this stuff, I\u0026rsquo;m sure there are better ways to accomplish what I\u0026rsquo;m doing. And I would LOVE to hear about them. Please feel free to comment!\nDisclaimer aside, let\u0026rsquo;s get into the code.\nWhat Was Yesterday The first thing I needed to accomplish was determining the date of the prior day. Like most people (I hope), I only work 5 days a week. So simply grabbing yesterday\u0026rsquo;s date wasn\u0026rsquo;t going to work. Instead, I need to keep subtracting a day\u0026rsquo;s worth of time from the current day, until I reached some time period that fell between Monday and Friday.\nThat lead me to:\n(defun my/org-find-previous-workday ()  (let* ((time (time-subtract (current-time) (seconds-to-time 86400)))  (workdays \u0026#39;(\u0026#34;Monday\u0026#34; \u0026#34;Tuesday\u0026#34; \u0026#34;Wednesday\u0026#34; \u0026#34;Thursday\u0026#34; \u0026#34;Friday\u0026#34;)))  (while (not (member (format-time-string \u0026#34;%A\u0026#34; time) workdays))  (setq time (time-subtract time (seconds-to-time 86400))))  time)) Grab The Tasks Once I knew the previous working day\u0026rsquo;s date, I needed to grab the journal entry\u0026rsquo;s content. Since I include notes and other references for each entry, and this email is supposed to be succinct, using the entire journal entry wasn\u0026rsquo;t sufficient. Instead, I needed to strip out just the second level headings, which include short summaries of what I\u0026rsquo;m working on.\nI wrote three functions to handle this, which are included below. The results of these three functions is to return a list of all the headers in the org file with a level I specified. If I don\u0026rsquo;t specify a level, it will return all header levels.\n(defun my/org-should-include-current (level)  (progn  (if (and  (outline-on-heading-p)  (or  (eq nil level) (eq level (org-outline-level))))  t  nil)))  (defun my/org-get-current-header ()  (progn  (setq beg (point))  (outline-end-of-heading)  (buffer-substring-no-properties beg (point))))  (defun my/org-outline-headings-to-list (level)  (setq headings \u0026#39;())  (show-all)  (goto-char (point-min))   (if (my/org-should-include-current level)  (add-to-list \u0026#39;headings (my/org-get-current-header) t))   (while (outline-next-heading)  (if (my/org-should-include-current level)  (add-to-list \u0026#39;headings (my/org-get-current-header) t)))  headings) Generating The Message At this point, I had all the data I needed to quickly generate my scrum message. All that was left was to hook it together, open a temp buffer with the formatted results, and then start filling in the current day\u0026rsquo;s goals.\n(defun my/org-outline-create-scrum-message ()  (interactive)  (let* ((previous (my/org-find-previous-workday)))  (setq journal-file (concat org-journal-dir (format-time-string \u0026#34;%Y%m%d\u0026#34; previous)))  (if (file-exists-p journal-file)  (progn  (switch-to-buffer (find-file-noselect journal-file))  (setq headings (my/org-outline-headings-to-list 2))  (switch-to-buffer \u0026#34;*daily scrum*\u0026#34;)  (erase-buffer)  (insert \u0026#34;* Yesterday\\n\u0026#34;)  (mapcar (lambda(element)  (insert (replace-regexp-in-string \u0026#34;^** ..... \u0026#34; \u0026#34; - \u0026#34; element) \u0026#34;\\n\u0026#34;)) headings)  (insert \u0026#34;\\n* Today\\n - \u0026#34;)  (org-mode)  (show-all))))) Future Expansion I have been using this method for the last couple of weeks to much success. It has saved me a ton of time, and has helped ensure that I account for every task I worked on during the previous day.\nThere are a few things I would like to improve. The most obvious next step is to hook up gnus to my work email and generate this message in an actual email buffer. Then, once I\u0026rsquo;m finished typing, I can just send it off directly from Emacs instead of copy and pasting it into my mail client.\nThe other thing I need to handle is skipped dates. If I take a vacation day, or there is a holiday, this code will just fail to generate a message template for me. It only goes back one day and then calls it quits after that. It wouldn\u0026rsquo;t take much to modify it to keep searching until it finds a day with an entry. I just haven\u0026rsquo;t gotten around to it yet.\nAs I mentioned before, I\u0026rsquo;m sure the code could be improved. I would love to hear feedback from the community on what I could do better. Lisp is still pretty new to me, but I\u0026rsquo;ve been having a blast learning it.\nFor those interested in seeing the code all in one place, or checking out the rest of my configuration, you can see it on GitHub.\nThanks, and happy coding!\n","date":"2013-11-17","permalink":"https://cupfullofcode.com/blog/2013/11/17/generate-daily-messages-with-org-journal/","tags":["org-mode","emacs","elisp"],"title":"Generate Daily Messages With Org Journal"},{"content":"I live on the command line. Between vim, tmux, and xmonad, there isn\u0026rsquo;t much I have to use the mouse for these days. Given my love for keyboard navigation, it only makes sense that I learn as many of the command line shortcuts available as possible. Here I detail some of the most helpful navigation tricks, and those I use on a daily basis.\nFirst a brief word about these shortcut notations. If you see a command listed as C-a, that is the shorthand representation of pressing Control and a together. If you see M-b, that is the same as pressing Meta and b together. Meta is typically Alt on modern systems.\nI\u0026rsquo;m sure everyone knows about TAB completion, but just in case, I feel compelled to mention it. When working in your shell, you can begin specifying a file or directory and then use TAB to expand it as far as possible until a conflict arises. For example, let us assume we have a directory containing the files matthew.txt, jacob.txt and jacobsen.txt. If I wanted to open matthew.txt in vim, I can start typing vim m and hit TAB after the m. Since this character alone is enough to determine uniqueness, my shell will helpfully add the atthew.txt.\nHowever, if I wanted to open jacobsen.txt, I could type vim j\u0026lt;TAB\u0026gt;, which would only complete until jacob. After that, the shell cannot possibly know which file I meant, so it waits for more input. Typing a quick s and TAB; will finish the job, resulting in vim jacobsen.txt. A lot of shells offer context aware completion as well. In zsh for example, if I issue git checkout and hit TAB, I am presented with a list of branches and tags that I can checkout. Similarly, if I type kill I will get a list of running processes and their associated PIDs.\n There are also a lot of great shortcuts for navigation. For example, let us say you have typed out the command sp aux | grep 'vim' | xargs kill -9. At this point, you notice you have a typo at the very beginning. You could use your arrow keys to navigate back to the beginning of the line, delete the two offending characters, and then use the arrow keys to navigate to the end so you can continue crafting the command. But this is so time consuming! Instead, we can use 3 helpful shortcuts \u0026ndash; C-a, C-t, and C-e.\nC-a will jump your cursor to the start of the line. C-t will transpose the character under your cursor with the one to the left. In our case, there is no character to the left, so it simply moves the cursor to the right and then performs the swap. Now we can jump back to the end of the line with C-e. How efficient is that?\n A quick note about transpose. Vim users beware. This shifting behavior is different than what you normally experience when issuing xp in command mode, which swaps the character under the cursor to the right.\nWhat about if the error you made is towards the beginning, but isn\u0026rsquo;t at the first character? Once you\u0026rsquo;ve navigated to the beginning of the command with C-a, you can move forward a character at a time with C-f, or forward a word at a time with M-f. In the same spirit, you can move backwards a character with C-b, or back a word at a time with M-b.\nOne thing you will soon notice about these commands is that they tend to exist in pairs. The control options tend to do the least amount of work, whereas meta will work on a larger scale. So what about our C-t (transpose) option? Does it have a M-t equivalent? Certainly! This will transpose words.\nYou might not always want to transpose characters or words. Instead, you may need to delete some. C-d will delete one character a time, staring with the character under your cursor. M-d will delete words at a time. Notice though, that this deletes from the current cursor position to the end of the word. It does not actually go back to the beginning of the word, and then delete from there. If you need to delete a word from the current cursor position going backward, you can use M-backspace.\n There are quite a few times I\u0026rsquo;m crafting a command, and halfway through I realize I need bail on the command and check something first. But if I C-c to kill the current command, I\u0026rsquo;ll have to retype it, and that\u0026rsquo;s just no good. Sure, there are ways around this. I could use the mouse to copy the command and then paste it in later. I could open another tab or tmux window and check whatever, but that just takes too long. Instead, you can use C-u to cut the command from your cursor to the beginning of the line, placing that text in your kill-ring, thereby freeing yourself do whatever you have to do. If you\u0026rsquo;re already at the beginning of the command, you can C-k to cut forward from your cursor position. Once you\u0026rsquo;re ready to resume that command, you can use C-y to paste that command back and go on your merry way.\nBut it gets even better. Let\u0026rsquo;s say you used the C-u / C-k option a few times because it is so wicked helpful. But the last thing you cut isn\u0026rsquo;t what you want to restore. Use C-y to paste back your last cut, and then use M-y to cycle through your kill-ring until you find the text you want to restore!\n A lot of times in my workflow, I will edit a file, and then issue a git add /path/to/file to stage it. I can just type vim /path/to/file, do my edits, and then issue git add /path/to/file, but that means I have to type the same file path twice, and I can\u0026rsquo;t have that, even using TAB completion. The M-. command saves the day. M-. will insert the last argument from the previous command at the current cursor location. So now I just type vim /path/to/file, do my edits, and then git add M-. and the file path is added for me. Repeating M-. will cycle back through the last parameter for each of the commands stored in your history.\nThis post is getting a little lengthy, but there are just a couple more shortcuts that you simply must know about, and they all deal with your command history. If you\u0026rsquo;re anything like me, you tend to issue the same command multiple times in a day, be it ssh-ing to some host, issuing git status or what have you. Your shell maintains a history of the commands you have executed, and you can move back through this history using the arrow keys on the terminal. But those keys are SO far away from home row!\nAs you might have surmised, there is a more efficient solution. C-n and C-p will allow you to navigate through your history going forward and backwards, respectively.\n If the command you are looking to recall was executed recently, C-n and C-p are life savers. But if the command is more than a few lines back, they can quickly become annoying. C-r allows you to issue searches against the command history. Simply press C-r and then begin typing the command you would like to recall. As you type more and more characters, the most recent command matching your search will be displayed. Repeatedly tapping C-r at this point will find the next most recent command matching the criteria, and so on until all possible matches have been exhausted. Once you have found the command of interest, C-j will execute it. If you\u0026rsquo;d like to select the command, but edit it first, you can issue any of the navigation commands mentioned above to select it and start editing. Or, you can type C-g to abort the search, and your prompt will be restored with whatever text had originally been specified prior to the search.\n I hope you find these commands helpful, and they make working on the command line a little more enjoyable! And remember, there are plenty more shortcuts, so keep learning.\n","date":"2013-07-03","permalink":"https://cupfullofcode.com/blog/2013/07/03/efficient-command-line-navigation/","tags":["utilities","zsh"],"title":"Efficient Command Line Navigation"},{"content":"Any editor worth its salt has some provision for text snippet expansion. TextMate, Vim, and Sublime Text 2 all have this capability and Emacs is certainly no exception. If you\u0026rsquo;re not familiar with the concept of snippets, the basic idea involves defining a keyword, which when followed with some trigger (keyboard shortcut or menu option), replaces that keyword with some predefined text. This functionality is a great boost to productivity as it prevents the developer from having to manually type potentially hundreds or thousands of lines of relatively boilerplate code.\nYASnippet Like nearly all things in Emacs, there are a number of available packages that provide this feature. The one I\u0026rsquo;ll be discussing today is YASnippet (Yet Another Snippet). The installation instructions are straightforward and minimal, so I won\u0026rsquo;t bother covering them here. Instead, I\u0026rsquo;ll get right into the meat of the extension.\nPlain Text Expansion The most basic functionality any snippet expansion package can offer is straight text replacement. At first blush, this doesn\u0026rsquo;t seem terribly helpful, but let\u0026rsquo;s consider an example. Suppose I want to include a copy of the GNU Public License in my project. Copying and pasting such a lengthy license would quickly grow tiresome for each project you work on. But with the help of YASnippet, it\u0026rsquo;s as painless as defining the below snippet and then typing gpl3 and pressing TAB to expand.\n# name : GPLv3 # key : gpl3 # --  GNU GENERAL PUBLIC LICENSE  Version 3, 29 June 2007   Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.   Preamble   The GNU General Public License is a free, copyleft license for software and other kinds of works. [...] You will notice defining this snippet was incredibly easy. The #name : GPLv3 line defines a common name for the snippet. The keyword we will use to trigger the expansion is defined by # key: gpl3. Anything that follows the line # -- will be the replacement text that is inserted when our snippet is expanded. Phew! That sure saved us a ton of typing. But that\u0026rsquo;s barely scratching the surface.\nTab Stops While simple text replacement does have its place, it would be more beneficial if we could add a level of interactivity to the expansion process. This is where tab stop fields enter the scene. A lot of the boilerplate code a developer writes is similar, but not quite identical. For example, for loops follow the same structure, but the initial and terminating conditions, increment values, and variable names are likely to differ in some regard, so simple text expansion isn\u0026rsquo;t quite good enough. So let\u0026rsquo;s define the following snippet.\n# name : for # key : for # -- for($1; $2; $3) {  $0 } The $N values will act as tab stops for your cursor when the snippet is expanded. This means, after expansion, my cursor will stop at $1, allowing me to specify a value of my choosing. As I successively hit TAB, I will move through the other tab stops, in numerical order. Upon exiting the expansion, my cursor will end at $0, which is a special $N type marker. It should be noted that each of the tab stops can also be defined with default values, using the syntax ${N:default value}. If the defined default value is sufficient, you can simply tab past it and continue on your way.\nMirrored Fields While that is pretty awesome, there is a bit of a downside there. In each of the three stops, if I was using the variable i, I would have to type that in 3 times. i isn\u0026rsquo;t so bad, but if my variable is anExtremelyLongAndOverlyVerboseVariable, that is tedious and error prone. Luckily for us, YASnippet has the answer, and it is mirrored fields. Mirrored fields allow you to type something in once, and have it repeated throughout the snippet at other marked placeholders. The initial tab stop should be defined as ${N:enumerate} and each place you want that information mirrored should use the standard tab notation. Let\u0026rsquo;s see that in action!\nA common style you\u0026rsquo;ll see in code is to define an if / while / for block, and then include a comment at the bottom that reminds the reader of the condition we\u0026rsquo;re closing. YASnippet can certainly help us with this. Check out the snippet below. Type in the condition once, have it included twice. Sweet. Converting the for snippet is left as an exercise to the reader.\nif (${1:enumerate}) { $0 } // $1 Embedded Lisp While the above examples have been awesome, the real power of YASnippet has yet to be revealed. Not only can you include straight text, simple tab stops and mirrored fields, but you can even include elisp code! The realm of possibility just got ridiculous.\nLet\u0026rsquo;s look at an example from the C++ QT world. When defining QT UI classes, there is some standard code that must be included each time. Combining the power of mirrored fields with elisp, we can define the following snippets. You can see them in action on YouTube.\n# name: QT UI class ... { ... } # key: uiclass # --  #include \u0026lt;$3\u0026gt;  namespace Ui {  class $1; }  class ${1:Name} : public ${3:QWidget} {  Q_OBJECT  public:  $1(${2:QWidget * parent = 0});  ~$1();  private:  Ui::$1 * ui; }; # name: QT UI source # key: outsource # -- #include \u0026#34;ui_${1:$(downcase yas/text)}.h\u0026#34; #include \u0026#34;${1:$(downcase yas/text)}.h\u0026#34;  ${1:Name}::$1(QWidget * parent) : ${2:QWidget}(parent), ui(new Ui::$1) {  ui-\u0026gt;setupUi(this);  $0 }  $1::~$1() { } As you can see, the syntax for including elisp is similar to providing default values for tab stop fields, except all the power of elisp is unleashed! YASnippet provides a handy placeholder, yas/text which represents the text that is being mirrored in the field. Using this, you can easily camel case certain words, upper or lowercase sections of code, and more. But you\u0026rsquo;re not limited to just built-in functionality. You can define entirely new functions of code and reference them just like anything else.\nPutting It All Together What follows are a few elisp functions I have defined and a snippet that makes use of them. This snippet will generate the skeleton for a PHP class, including the namespace at the top. As all of the building blocks have been covered earlier in this post, I\u0026rsquo;ll just briefly touch on each portion.\n(defun find-git-repo (dir)  (if (string= \u0026#34;/\u0026#34; dir)  nil  (if (file-exists-p (expand-file-name \u0026#34;.git/\u0026#34; dir))  dir  (find-git-repo (expand-file-name \u0026#34;../\u0026#34; dir))))) This function starts looking within a specified directory for the existing of a .git directory, which would signify we are at the top level of a git repository. If it doesn\u0026rsquo;t find it, it keeps looking up the directory structure until it either succeeds, or reaches the root. If it finds it, we return that directory. Otherwise, we\u0026rsquo;ll return nil.\n(defun find-project-root ()  (interactive)  (if (ignore-errors (eproject-root))  (eproject-root)  (or (find-git-repo (buffer-file-name)) (file-name-directory (buffer-file-name))))) Using our find-git-repo as a spring board, this function will determine any project\u0026rsquo;s root directory. As I use eproject for a lot of my work, I first check to see if the eproject-root variable is defined. If it isn\u0026rsquo;t, I\u0026rsquo;ll fall back to looking for a git repo.\n(defun file-path-to-namespace ()  (interactive)  (let (  (root (find-project-root))  (base (file-name-nondirectory buffer-file-name))  )  (substring (replace-regexp-in-string \u0026#34;/\u0026#34; \u0026#34;\\\\\u0026#34; (substring buffer-file-name (length root) (* -1 (length base))) t t) 0 -1)  )  ) This function will take the current buffer path, find the project root it is included in, and convert it into a PHP namespace with the portion of the path containing the project root removed.\n# name : php-namespaced-class # key : class # -- \u0026lt;?php  /**  * `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`  *  * @author `(user-full-name)` `(if user-mail-address (concat \u0026#34;\u0026lt;\u0026#34; user-mail-address \u0026#34;\u0026gt;\u0026#34;) \u0026#34;\u0026#34;)`  */  namespace `(file-path-to-namespace)`;  /**  * ${1:Description}  */ class `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))` {  $0 } This final snippet hooks everything up. If I have a project at /var/www/html/, and I create a file NewUtil.php in say lib/utils/, this snippet will generate\n\u0026lt;?php  /** * NewUtil * * @author Matthew M. Keeler \u0026lt;keelerm@tortugas-llc.com\u0026gt; */  namespace lib\\utils;  /** * New Util description goes here */ class NewUtil { } As you can see, the power of YASnippet is incredible. Be sure to check out the YASnippet repo for more examples of snippets that are included in the default installation. If any of you are currently using it, I\u0026rsquo;d love to see some of the snippets you use. And of course, if you know of ways to improve my examples, please let me know! Happy coding.\n","date":"2013-02-26","permalink":"https://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/","tags":["org-mode","emacs","elisp","snippets"],"title":"Snippet Expansion with YASnippet"},{"content":"As a developer, I tend to prefer automation whenever possible. Hours of your life are lost in the minutes spent doing that which could easily be scripted. The classic rule of thumb I try to follow is \u0026ldquo;if you have to do it twice, automate it.\u0026rdquo;\nAt my job, I have to maintain multiple versions of the product, each of which are hosted on different virtual machines. When I am ready to start work on a new feature to an existing version, I have to fire up my code editor, connect multiple terminals to the system so I can tail various log files, and open a shell for git. As one can imagine, this is rather time consuming. There is simply no way I\u0026rsquo;m doing this by hand every day. To address this, I use a combination of SSH keys and configs, GNU screen and a small alias.\nThere are tons of documentation on the web about the use of SSH keys and config files. If you are unfamiliar with these topics, you can read about SSH keys at http://paulkeck.com/ssh/ and config files at http://nerderati.com/2011/03/simplify-your-life-with-an-ssh-config-file/. Since the main purpose is to show how my tools fit together, I\u0026rsquo;ll just state that every virtual server I connect to has a copy of my SSH key, and that I have a config file defined with an example snippet shown below:\nHost 19 HostName 19.virtualserver Port 12345 User developer Each host corresponds to a server hosting a specific version, so instead of issuing ssh -p12345 developer@19.virtualserver, I can simply type ssh 19. With the added bonus SSH keys bring to the party, connecting is quick and simple. But what about all those connections I mentioned earlier?\nWhile it is true I could open multiple terminal tabs, I actually prefer to work within GNU Screen. Once again, the details of using screen are outside the scope of this entry, but check out this post http://www.kuro5hin.org/story/2004/3/9/16838/14935 for some general information.\nOne thing you don\u0026rsquo;t hear a lot about is scripting with screen. With the powerful options provided, you can easily start a screen, launch multiple named tabs, and execute any command of your choosing. I have a screen config for each product version I manage. Version 1.9\u0026rsquo;s config is shown below:\n# Start screen in detached mode (-d -m), and give it a session name (\u0026#39;1-9\u0026#39;) to avoid # confusion when communicating with this session later as we add commands screen -d -m -S 1-9  # Run a command in the current screen window (edit some file for example) screen -S 1-9 -p 0 -X title Git  # Create a new window, and run a command in that window: screen -S 1-9 -p 0 -X screen -t Code emacsclient -nw -c screen -S 1-9 -p 0 -X screen -t Application ssh 19 \u0026#39;tail -F /var/www/product/logs/error.log\u0026#39; screen -S 1-9 -p 0 -X screen -t Apache ssh 19 \u0026#39;tail -F /var/log/httpd/error.log\u0026#39; screen -S 1-9 -p 0 -X screen -t Remote ssh 19 Executing this script will create a new screen session with five tabs, giving me a tab for git, one for my editor of choice, two actively tailing various log files, and a third connected to the remote system so I can easily navigate and check out other bits of the system as needed. This script relies heavily on my aforementioned use of SSH configs and keys. With the keys copied over, I don\u0026rsquo;t have to provide a password for the three tabs that connect to the development box. And if any of the connection details for any of the virtual machines change, I don\u0026rsquo;t have to touch this script, and can instead make the modification in one place.\nAnd finally, just to prevent a few more keystrokes, I also have defined aliases in my .alias file like the following:\nalias \u0026#39;19\u0026#39;=\u0026#39;cd ~/Projects/version19; ~/.screen.d/1.9 \u0026amp;\u0026amp; screen -r 1-9\u0026#39; Now, when I\u0026rsquo;m ready to go to work, I simply open a terminal, type 19, and I\u0026rsquo;m automatically thrown into screen, running the applications and viewing the logs that I almost always need, ready to hit the ground coding with absolute minimal effort.\n","date":"2013-01-08","permalink":"https://cupfullofcode.com/blog/2013/01/08/automation-with-gnu-screen-and-ssh/","tags":["utilities","screen","automation"],"title":"Automation with GNU Screen and SSH"},{"content":"A few months ago, I started playing around with Emacs. For roughly six years prior to that, I was a die-hard Vim fan. Vim will always hold a special place in my heart, but I have grown to love Emacs. I\u0026rsquo;ll undoubtedly cover Emacs in more detail, but I\u0026rsquo;ll leave that for other posts.\nOne cannot use Emacs for long without dabbling in Elisp, the language upon which Emacs is built. Having only briefly touched on Lisp languages in college, I figured it was high time to start the learning process.\nRecently, a friend of mine stumbled upon this cute little code monkey on someone\u0026rsquo;s Stackoverflow profile.\n __  w c(..)o (  \\__(-) __)  /\\ (  /( )__)  m /|  | \\  m m Quite naturally I thought, \u0026ldquo;I should make him dance.\u0026rdquo; As this seemed relatively simple, I decided to tackle this with Elisp.\nI first created four slightly altered copies of the little guy, and with the code shown below, had him dancing in no time. You can make him dance interactively a set number of times by issuing the standard prefix arguments prior to invoking the function ( e.g. C-u 100 M-x dance-monkey ) or watch him shake his groove thing on YouTube.\n(defun insert-monkey (num)  (interactive \u0026#34;P\u0026#34;)  (erase-buffer)  (insert-file-contents  (concat \u0026#34;/home/keelerm/Projects/emacs/code-monkey/\u0026#34; (int-to-string num))))  (defun dance-monkey (repeat)  (interactive \u0026#34;P\u0026#34;)  (let ((times 0))  (while (\u0026lt; times repeat)  (insert-monkey (mod times 4))  (setq times (1+ times))  (sit-for 0.2)  ))) As stated above, I know this is extremely simple, but I suppose everyone has to start somewhere. Besides, who doesn\u0026rsquo;t love a dancing monkey?\n","date":"2013-01-05","permalink":"https://cupfullofcode.com/blog/2013/01/05/dancing-code-monkey/","tags":["emacs","elisp"],"title":"Dancing Code Monkey"},{"content":"Undoubtedly, your grade school grammar teacher has scolded you at one point or another for your inadvertent use of a double negative. Statements such as “I don’t know nothing about physics”, while grammatically incorrect, are often semantically inaccurate as well. While the previous statement would commonly be understood to mean the person possesses no knowledge of physics, the actual statement implies the opposite, that the preposition “I know nothing about physics” is incorrect. Certainly your teacher offered sound advice and one would be wise to heed such instruction.\nUnfortunately, when programming such double negation is quite common and often leads to disastrous ends. For example, who would qualify for the below condition?\n\u0026lt;?php if( !($student-\u0026gt;age != 18 \u0026amp;\u0026amp; !$student-\u0026gt;enrolled(\u0026#39;Physics\u0026#39;)) ) { ... } We want someone who is not both not 18 and not enrolled in physics. Simple, right?\nGranted, at the time this snippet was written, it might have been well understood by the author. But 6 months later when this line needs altered by a different developer, precious time is wasted deciphering this twisted logic.\nThis is where De Morgan’s Laws come in handy. From Wikipedia:\n “The negation of a conjunction is the disjunction of the negations.”\n“The negation of a disjunction is the conjunction of the negations.“\n Great, so what does that mean? Basically, it means that if you have two conditions — p and q — and you apply the negation to the statement p and q, this is logically equivalent to !p or !q. Similarly, if we have the statement p or q to which we apply the negation operation, this is logically equivalent to !p and !q.\nThe easiest way to think about this mentally is that when we apply a negation across a statement, we prepend each preposition ( either p or q ) with the not operator, and every time we encounter the logical operators and or or, we toggle them\nThus, ! ( ( p or q ) and ( r or s ) ) implies ( (!p and !q) or (!r and !s)).\nUsing De Morgan’s law, let’s simplify the logic of our initial if condition.\nLet us assume the preposition p represents the condition where the student’s age is 18 and q represents the condition where the student is enrolled in physics. Given this, our initial condition can be written in a more compact form as\nif( !(!p \u0026amp;\u0026amp; !q) ) { After applying De Morgan’s Law, we have\nif( !!p || !!q ) { The negation of the negation of p is p, so the above reduces to\nif( p || q ) { Substituting p and q for the original conditions, we arrive at the greatly simplified\n\u0026lt;?php if ( $student-\u0026gt;age == 18 || $student-\u0026gt;enrolled(\u0026#39;Physics\u0026#39;) ) { which is much more readily understood.\nIn order to convince you that the two statements are logically equivalent, a truth table is provided below. Note that the second to last column contains the results of the original condition, and the last column is the reduced condition.\n| p | q | !p | !q | !p \u0026amp;\u0026amp; !q | !(!p ^ !q) | p v q | |---+---+----+----+----------+------------+-------| | 1 | 1 | 0 | 0 | 0 | 1 | 1 | | 1 | 0 | 0 | 1 | 0 | 1 | 1 | | 0 | 1 | 1 | 0 | 0 | 1 | 1 | | 0 | 0 | 1 | 1 | 1 | 0 | 0 | As you can see, De Morgan’s Law is a powerful tool for managing conditional complexity in code. I hope this hasn’t not helped.\n","date":"2011-09-01","permalink":"https://cupfullofcode.com/blog/2011/09/01/negation-and-de-morgans-law/","tags":["logic"],"title":"Negation and De Morgan's Law"}]